{"version":3,"file":"moomin.min.js","sources":["../src/TestComponent.tsx","../src/deserialize.tsx","../src/RemoteView.tsx"],"sourcesContent":["import React from \"react\";\nimport { View, Text } from \"react-native\";\n\nconst TestComponent = () => {\n  return (\n    <View>\n      <Text>hello world</Text>\n    </View>\n  );\n};\n\nexport default TestComponent;\n","import React from \"react\";\nimport { View, Text } from \"react-native\";\n// first step, TODO: make working version\n// this version cannot handle fragments\n\ninterface Json {\n  type: \"View\" | \"Text\";\n  props: {\n    [key: string]: any;\n  };\n}\n\nconst map = {\n  View,\n  Text,\n};\n\nexport function deserialize(json: Json | string | Json[], i?: number): any {\n  if (json === null) return null;\n  if (typeof json === \"string\") return json;\n  if (Array.isArray(json)) return json.map(deserialize);\n\n  const Component: any = map[json.type];\n\n  if (!Component) return null;\n\n  const { children = null, ...rest } = json.props;\n\n  return (\n    <Component {...rest} key={i}>\n      {deserialize(children)}\n    </Component>\n  );\n}\n","import React from \"react\";\nimport { deserialize } from \"./deserialize\";\n\ninterface RemoteViewProps {\n  src: string;\n}\n\ninterface useSerializedViewRes {\n  status: viewStatus;\n  serializedRemote: any;\n}\n\ntype viewStatus = \"error\" | \"loading\" | \"success\";\n\nfunction useSerializedView(src: string): useSerializedViewRes {\n  const [status, setStatus] = React.useState<viewStatus>(\"loading\");\n  const [serializedRemote, setSerializedRemote] = React.useState<any>(null);\n\n  // on mount, fetch the data\n  React.useEffect(() => {\n    (async () => {\n      try {\n        const remote = await fetch(src);\n        setSerializedRemote(remote.json());\n        setStatus(\"success\");\n      } catch (err) {\n        setStatus(\"error\");\n      }\n    })();\n  }, []);\n\n  return {\n    status,\n    serializedRemote,\n  };\n}\n\nfunction RemoteView(props: RemoteViewProps) {\n  const { src } = props;\n  const { status, serializedRemote } = useSerializedView(src);\n\n  // todo: add error, loading components\n  if (status !== \"success\") return null;\n\n  return deserialize(serializedRemote);\n}\n\nexport default RemoteView;\n"],"names":["map","View","Text","deserialize","json","i","Array","isArray","Component","type","children","rest","props","React","key","src","status","serializedRemote","setStatus","useState","setSerializedRemote","useEffect","remote","fetch","err","useSerializedView"],"mappings":"2GAGA,MCSMA,EAAM,MACVC,YACAC,iBAGcC,EAAYC,EAA8BC,GACxD,GAAa,OAATD,EAAe,OAAO,KAC1B,GAAoB,iBAATA,EAAmB,OAAOA,EACrC,GAAIE,MAAMC,QAAQH,GAAO,OAAOA,EAAKJ,IAAIG,GAEzC,MAAMK,EAAiBR,EAAII,EAAKK,MAEhC,IAAKD,EAAW,OAAO,KAEvB,MAAME,SAAEA,EAAW,QAASC,GAASP,EAAKQ,MAE1C,OACEC,gBAACL,mBAAcG,GAAMG,IAAKT,IACvBF,EAAYO,wBCOnB,SAAoBE,GAClB,MAAMG,IAAEA,GAAQH,GACVI,OAAEA,EAAMC,iBAAEA,GAzBlB,SAA2BF,GACzB,MAAOC,EAAQE,GAAaL,EAAMM,SAAqB,YAChDF,EAAkBG,GAAuBP,EAAMM,SAAc,MAepE,OAZAN,EAAMQ,UAAU,KACd,WACE,IACE,MAAMC,QAAeC,MAAMR,GAC3BK,EAAoBE,EAAOlB,QAC3Bc,EAAU,WACV,MAAOM,GACPN,EAAU,WANd,IASC,IAEI,CACLF,OAAAA,EACAC,iBAAAA,GAMmCQ,CAAkBV,GAGvD,MAAe,YAAXC,EAA6B,KAE1Bb,EAAYc,oBFzCC,IAElBJ,gBAACZ,YACCY,gBAACX"}